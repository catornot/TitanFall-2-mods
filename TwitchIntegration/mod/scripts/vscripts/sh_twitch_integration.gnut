global function TwicthInter_settings_Init

struct {
	array< array<string> > DNA = []
    array<string> codon = []
    array<entity>ClientsWRui
    int LastEvenTime = Time()
    void functionref() CleanUpFunc
} file


void function TwicthInter_settings_Init()
{
    AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_TWITCH", "TWITCH_RIFF", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "1" )
    AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_TWITCH", "TWITCH_COOLDOWN", "60" )

    #if SERVER
    if ( GetTwicthState() ){
        // generateRandomCommandNames()

        AddClientCommandCallback( "gkjreiughieu" , AddAToCodon)
        AddClientCommandCallback( "fndwjbfiupwh" , AddUToCodon)
        AddClientCommandCallback( "hewjgfiywvii" , AddCToCodon)
        AddClientCommandCallback( "wiuehbuifhfu" , AddGToCodon)

        AddClientCommandCallback( "IHaveRui0101" , AddPlayertoRuiUpdateList)

        thread Test()

        thread TwicthRequestsThink()
    }
    #endif
}

#if SERVER

void function Test()
{
    wait 10
    foreach( entity player in file.ClientsWRui )
    {
        ServerToClientStringCommand( player, "SetText test" )
    }
    
    wait 10

    foreach( entity player in file.ClientsWRui )
    {
        ServerToClientStringCommand( player, "ResetText" )
    }
}

bool function GetTwicthState(){
    return GetCurrentPlaylistVarInt("TWITCH_RIFF", 0) == 1
}

int function GetTwicthCoolDown(){
    return GetCurrentPlaylistVarInt("TWITCH_COOLDOWN", 60)
}



bool function AddAToCodon( entity player, array<string> args ){
    thread AddNucleotideToDNA( "A" )
    return true;
}
bool function AddUToCodon( entity player, array<string> args ){
    thread AddNucleotideToDNA( "U" )
    return true;
}
bool function AddCToCodon( entity player, array<string> args ){
    thread AddNucleotideToDNA( "C" )
    return true;
}
bool function AddGToCodon( entity player, array<string> args ){
    thread AddNucleotideToDNA( "G" )
    return true;
}

void function AddNucleotideToDNA(string nucleotide){
    file.codon.append( nucleotide )

    SendHudMessage( GetPlayerArray()[0], nucleotide, -1, 0.2, 255, 255, 0, 0, 0.15, 20, 0.15 )

    if ( file.codon.len() == 3 ){
        file.DNA.append( file.codon )
        file.codon.clear()
    }
}

bool function AddPlayertoRuiUpdateList( entity player, array<string> args )
{
    // it goes A,U,G,C
    array< string > commands = 
    [
        "SetCommands"
        GetConVarString("A_nucleo"),
        GetConVarString("U_nucleo"),
        GetConVarString("G_nucleo"),
        GetConVarString("C_nucleo")
    ]
    ServerToClientStringCommand( player, ArrayToString( commands, true ) )
    
    file.ClientsWRui.append( player )

    return true
}

void function TwicthRequestsThink()
{
    for(;;)
    {
        if ( LastEvenTime + 60 < Time() )
        {
            CleanUpFunc() 
        }
        wait 0.05
    }
}

#endif

// void function generateRandomCommandNames(){

//     string long_string = "gfihvuyfhbewufbwejyhfbvydwfgyuewcbruyewbfuh4cbyucrg4yufcu32bvfcgy23tygryu34g6r7g346c6734igcr7y6i34rgyicg43yurigewyurcgewurcbewrbyucrgy432grcuewgryg43ygcyurgyu4rgr3wygcgryuewgryucegrygryugewyrgcewyrcgwue"
    
    
// 	command.P = long_string.slice(10,RandomInt(10)+10)
//     command.L = long_string.slice(20,RandomInt(10)+20)
//     command.M = long_string.slice(30,RandomInt(10)+30)
//     command.O = long_string.slice(40,RandomInt(10)+40)
// }

// this is just useless
// string function get_command_P(){
//     return command.P
// }
// string function get_command_M(){
//     return command.M
// }
// string function get_command_L(){
//     return command.L
// }
// string function get_command_O(){
//     return command.O
// }
